name: Building For Windows

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  BuildForWindows:
    name: '🪟 Build for Windows'
    runs-on: windows-latest
    env:
      CUDA_PATH: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.6"
      CUDA_PATH_BIN: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.6\\bin"
      CUDA_PATH_V12_6: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.6"
      CUDA_PATH_VX_Y: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.6"

      NVIDA_DRIVER_URL: "https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.94_windows.exe"
      NVIDA_DRIVER_FILE_NAME: "cuda_12.6.2_560.94_windows.exe"
      NVIDA_INSTALL_ARGS: "-s nvcc_12.6 visual_studio_integration_12.6 cudart_12.6"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: 'Get Nvdia Driver Cache'
      id: cache-nvdia
      uses: actions/cache@v4
      with:
        path: nvidia_toolkit_cache
        key: nvidia-toolkit-${{ env.NVIDA_DRIVER_FILE_NAME }}
    
    - name: Download Nvidia Driver
      if: steps.cache-nvdia.outputs.cache-hit != 'true'
      run: Invoke-WebRequest -Uri $env:NVIDA_DRIVER_URL -OutFile $env:NVIDA_DRIVER_FILE_NAME
      
    - name: '🧰 Install Nvidia Driver'
      if: steps.cache-nvdia.outputs.cache-hit != 'true'
      run: |
        Start-Process -FilePath $env:NVIDA_DRIVER_FILE_NAME -ArgumentList $env:NVIDA_INSTALL_ARGS -Wait -NoNewWindow
      
    - name: 'Setup for Cache Nvidia Driver'
      if: steps.cache-nvdia.outputs.cache-hit != 'true'
      run: |
        mkdir -p "nvidia_toolkit_cache"
        xcopy "C:\Program Files\NVIDIA GPU Computing Toolkit\" "nvidia_toolkit_cache\" /s /e /y
      
    - name: Cache Nvidia Driver
      id: cache-primes-save
      if: steps.cache-nvdia.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: nvidia_toolkit_cache
        key: nvidia-toolkit-${{ env.NVIDA_DRIVER_FILE_NAME }}

    - name: 'Restore NVIDIA Toolkit from cache'
      if: steps.cache-nvdia.outputs.cache-hit == 'true'
      run: |
        xcopy "nvidia_toolkit_cache\" "C:\Program Files\NVIDIA GPU Computing Toolkit\" /s /e /y
        xcopy "nvidia_toolkit_cache\CUDA\v12.6\extras\visual_studio_integration\MSBuildExtensions\" "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\BuildCustomizations\" /s /e /y
    
    - shell: bash
      name: Add Nvidia to path
      run: |
        echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
        echo "CUDA_PATH_V12_6=$CUDA_PATH_V12_6" >> $GITHUB_ENV
        echo "CUDA_PATH_VX_Y=$CUDA_PATH_VX_Y" >> $GITHUB_ENV
        echo "$CUDA_PATH_BIN" >> $GITHUB_PATH
       
    - name: '🏗️ Configure CMake'
      run: |
        cmake -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: '🛠️ Build'
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}} -j 4
    
    - name: '⬆️ Upload Exe File'
      uses: actions/upload-artifact@v4
      with:
        name: binariesArtifact
        path: "${{github.workspace}}\\release\\bin\\Release"

  ReleaseArtifact:
    name: '🚀 Release Project'
    runs-on: ubuntu-latest
    needs: BuildForWindows
    steps:
    - name: '⬇️ Download exe'
      uses: actions/download-artifact@v4
      with:
        name: binariesArtifact
        
    - name: '📃 Output Current Files'
      run: ls -R

    - name: '🏷️ Add binaries to Release Tag'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: Continuous
        files: |
          hipims-flood.exe
          hipims-flood-mgpus.exe
          hipims-landslide.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}